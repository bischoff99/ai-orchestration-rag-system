{
  // ==========================================
  // PYTHON CONFIGURATION
  // ==========================================

  // Python interpreter and environment
  "python.defaultInterpreterPath": "./venv/bin/python",
  "python.terminal.activateEnvironment": true,
  "python.envFile": "${workspaceFolder}/.env",

  // Python analysis and IntelliSense
  "python.analysis.typeCheckingMode": "basic",
  "python.analysis.autoImportCompletions": true,
  "python.analysis.fixAll": ["source.unusedImports", "source.organizeImports"],
  "python.analysis.diagnosticMode": "workspace",
  "python.analysis.extraPaths": [
    "${workspaceFolder}/vector_db",
    "${workspaceFolder}/rag_sources",
    "${workspaceFolder}/models"
  ],

  // Python linting (using flake8 as configured in project)
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.mypyEnabled": true,
  "python.linting.flake8Args": ["--max-line-length=88", "--extend-ignore=E203,W503"],

  // Python formatting (using black as configured in project)
  "python.formatting.provider": "black",
  "python.formatting.blackArgs": ["--line-length", "88"],
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": "explicit",
    "source.fixAll": "explicit"
  },

  // ==========================================
  // TESTING CONFIGURATION
  // ==========================================

  // Pytest configuration
  "python.testing.pytestEnabled": true,
  "python.testing.unittestEnabled": false,
  "python.testing.pytestArgs": [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
  ],
  "python.testing.cwd": "${workspaceFolder}",

  // ==========================================
  // FASTAPI & WEB DEVELOPMENT
  // ==========================================

  // FastAPI specific settings
  "python.analysis.typeCheckingMode": "basic",
  "files.associations": {
    "**/main.py": "python",
    "**/app.py": "python",
    "**/api.py": "python"
  },

  // Auto-reload for FastAPI development
  "python.terminal.activateEnvInCurrentTerminal": true,

  // ==========================================
  // DOCKER & CONTAINERIZATION
  // ==========================================

  // Docker integration
  "docker.languageserver.diagnostics.deprecatedMaintainer": "ignore",
  "docker.languageserver.diagnostics.emptyContinuationLine": "ignore",

  // Docker Compose file associations
  "files.associations": {
    "docker-compose*.yml": "yaml",
    "docker-compose*.yaml": "yaml",
    "Dockerfile*": "dockerfile"
  },

  // ==========================================
  // AI/ML SPECIFIC SETTINGS
  // ==========================================

  // Jupyter notebook settings for data science
  "jupyter.notebookFileRoot": "${workspaceFolder}",
  "jupyter.runStartupCommands": [
    "%load_ext autoreload",
    "%autoreload 2",
    "import sys; sys.path.append('${workspaceFolder}')"
  ],

  // Large file handling for ML models
  "files.maxMemoryForLargeFilesMB": 4096,
  "search.maxFileSize": 104857600, // 100MB for large datasets

  // Git settings for large repos
  "git.largeFileSystemCheck": true,

  // ==========================================
  // VECTOR DATABASES & DATA
  // ==========================================

  // Exclude vector database files from search and indexing
  "files.exclude": {
    "**/chroma/": true,
    "**/vector_db/faiss/*.index": true,
    "**/models/embedder/": true,
    "**/fine_tuned_models/": true
  },
  "search.exclude": {
    "**/chroma/": true,
    "**/vector_db/faiss/*.index": true,
    "**/models/": true,
    "**/logs/": true
  },

  // ==========================================
  // N8N WORKFLOW DEVELOPMENT
  // ==========================================

  // JSON settings for N8N workflows
  "[json]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // ==========================================
  // EDITOR & WORKSPACE SETTINGS
  // ==========================================

  // General editor settings
  "editor.rulers": [88, 120], // PEP 8 and max line length
  "editor.wordWrap": "on",
  "editor.minimap.enabled": false,
  "editor.renderWhitespace": "boundary",
  "editor.trimAutoWhitespace": true,

  // File associations
  "files.associations": {
    ".env*": "properties",
    "requirements*.txt": "pip-requirements",
    "pyrightconfig.json": "jsonc",
    "**/n8n/*.json": "json",
    "**/workflows/*.json": "json"
  },

  // Exclude common files from workspace
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/__pycache__": true,
    "**/*.pyc": true,
    "**/.pytest_cache": true,
    "**/node_modules": true,
    "**/logs/": true,
    "**/runs/": true,
    "**/state/": true
  },

  // ==========================================
  // TERMINAL & TASKS
  // ==========================================

  // Terminal settings for Python development
  "terminal.integrated.env.osx": {
    "PYTHONPATH": "${workspaceFolder}:${workspaceFolder}/src",
    "OLLAMA_HOST": "http://localhost:11434",
    "N8N_HOST": "http://localhost:5678"
  },
  "terminal.integrated.cwd": "${workspaceFolder}",

  // Task configurations
  "task.saveBeforeRun": "always",
  "task.quickOpen.detail": true,

  // ==========================================
  // EXTENSIONS RECOMMENDATIONS
  // ==========================================

  // Recommended extensions for this project
  "extensions.recommendations": [
    // Python essentials
    "ms-python.python",
    "ms-python.vscode-pylance",
    "ms-python.black-formatter",
    "ms-python.flake8",

    // Testing
    "ms-python.pytest",

    // Docker
    "ms-azuretools.vscode-docker",
    "ms-vscode-remote.remote-containers",

    // Data Science / AI
    "ms-toolsai.jupyter",
    "ms-toolsai.jupyter-keymap",
    "ms-toolsai.vscode-jupyter-powertoys",

    // FastAPI
    "rangav.vscode-thunder-client",

    // Development tools
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-json",
    "redhat.vscode-yaml",
    "ms-vscode-remote.remote-ssh",

    // Git and collaboration
    "ms-vscode.vscode-git-graph",
    "github.copilot",
    "github.copilot-chat",

    // Environment and dependencies
    "ms-python.isort",
    "tamasfe.even-better-toml",

    // Additional utilities
    "ms-vscode.vscode-markdownlint",
    "streetsidesoftware.code-spell-checker"
  ],

  // ==========================================
  // DEBUGGING CONFIGURATIONS
  // ==========================================

  // Python debugging settings
  "debug.python.usePythonPath": true,
  "debug.terminal.clearBeforeReusing": true,

  // ==========================================
  // WORKSPACE SPECIFIC SETTINGS
  // ==========================================

  // Custom settings for this AI orchestration project
  "workbench.editor.enablePreview": false,
  "explorer.confirmDelete": false,
  "git.confirmSync": false,

  // Performance optimizations for large workspaces
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/**": true,
    "**/__pycache__/**": true,
    "**/chroma/**": true,
    "**/vector_db/**": true,
    "**/models/**": true,
    "**/logs/**": true,
    "**/runs/**": true
  },

  // Search optimizations
  "search.followSymlinks": false,
  "search.useGlobalIgnoreFiles": true,
  "search.useIgnoreFiles": true,

  // ==========================================
  // REMOTE DEVELOPMENT
  // ==========================================

  // Dev container settings (for when using containers)
  "dev.containers.copyGitConfigs": false,
  "dev.containers.gitCredentialHelperConfigLocation": "none",

  // ==========================================
  // ADDITIONAL PYTHON SETTINGS
  // ==========================================

  // Import sorting (isort)
  "isort.args": ["--profile", "black", "--line-length", "88"],
  "editor.codeActionsOnSave": {
    "source.organizeImports": "explicit"
  },

  // Python docstring settings
  "autoDocstring.docstringFormat": "numpy",

  // ==========================================
  // MCP INTEGRATION
  // ==========================================

  // MCP server configurations (for Cursor/MCP integration)
  "mcp": {
    "servers": {
      "filesystem": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-filesystem", "${workspaceFolder}"]
      },
      "git": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-git", "--repository", "${workspaceFolder}"]
      }
    }
  }
}